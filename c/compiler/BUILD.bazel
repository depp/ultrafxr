load("//c:copts.bzl", "COPTS")

cc_library(
    name = "compiler",
    srcs = [
        "array.c",
        "array.h",
        "hash.c",
        "message_code.h",
        "message_write.c",
        "number_dectofloat.c",
        "sexpr_token.c",
        "source_text.c",
        "strbuf.c",
        "symbol.c",
        ":error_src",
        ":message_src",
    ],
    hdrs = [
        "error.h",
        "hash.h",
        "message.h",
        "number.h",
        "sexpr.h",
        "source.h",
        "strbuf.h",
        "symbol.h",
    ],
    copts = COPTS,
)

cc_library(
    name = "argparse",
    srcs = [
        "argparse.c",
    ],
    hdrs = [
        "argparse.h",
    ],
    copts = COPTS,
)

cc_library(
    name = "testutil",
    srcs = [
        "testutil.c",
    ],
    hdrs = [
        "testutil.h",
    ],
    copts = COPTS,
)

cc_test(
    name = "message_test",
    size = "small",
    srcs = ["message_test.c"],
    copts = COPTS,
    deps = [
        ":compiler",
        ":testutil",
    ],
)

cc_test(
    name = "number_test",
    size = "small",
    srcs = [
        "number_test.c",
    ],
    copts = COPTS,
    deps = [
        ":compiler",
        ":testutil",
    ],
)

cc_test(
    name = "sexpr_token_test",
    size = "small",
    srcs = [
        "sexpr_token_test.c",
    ],
    copts = COPTS,
    deps = [
        ":compiler",
        ":testutil",
    ],
)

cc_test(
    name = "source_text_test",
    size = "small",
    srcs = [
        "source_text_test.c",
    ],
    copts = COPTS,
    deps = [
        ":compiler",
        ":testutil",
    ],
)

cc_test(
    name = "strbuf_test",
    size = "small",
    srcs = ["strbuf_test.c"],
    copts = COPTS,
    deps = [
        ":compiler",
        ":testutil",
    ],
)

cc_test(
    name = "symbol_test",
    size = "small",
    srcs = [
        "symbol_test.c",
    ],
    copts = COPTS,
    deps = [
        ":compiler",
        ":testutil",
    ],
)

cc_binary(
    name = "error_gen",
    srcs = ["error_gen.c"],
    copts = COPTS,
    deps = [":argparse"],
)

genrule(
    name = "error_src",
    srcs = ["error.h"],
    outs = [
        "error_name.c",
        "error_text.c",
    ],
    cmd = "./$(location :error_gen) $(location error.h) " +
          "-include=c/compiler/error.h -prefix=ERR_ " +
          "-name-out=$(location error_name.c) -name-func=ufxr_errname " +
          "-msg-out=$(location error_text.c) -msg-func=ufxr_errtext",
    tools = [":error_gen"],
)

genrule(
    name = "message_src",
    srcs = ["message_code.h"],
    outs = ["message_text.c"],
    cmd = "./$(location :error_gen) $(location message_code.h) " +
          "-include=c/compiler/message_code.h -prefix=MSG_ " +
          "-msg-out=$(location message_text.c) -msg-func=ufxr_msgtext",
    tools = [":error_gen"],
)

cc_test(
    name = "error_test",
    size = "small",
    srcs = [
        "error.h",
        "error_test.c",
        ":error_src",
    ],
    copts = COPTS,
    deps = [
        ":testutil",
    ],
)
